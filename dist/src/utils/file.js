import path from"path";import{lookup}from"mrmime";import{createReadStream,lstatSync}from"fs";export function serveStatic(dir){return(req,res)=>{try{const url=req.getUrl().slice(1)||"index.html";const filePath=path.resolve(dir,url);const isFileOutsideDir=filePath.indexOf(path.resolve(dir))!==0;if(isFileOutsideDir){return res.writeStatus("403").res.end()}const fileStats=getFileStats(filePath);if(!fileStats){return res.writeStatus("404").end()}const{contentType,lastModified}=fileStats;const ifModifiedSince=req.getHeader("if-modified-since");if(ifModifiedSince===lastModified){return res.writeStatus("304").res.end()}res.writeHeader("Content-Type",contentType);res.writeHeader("Last-Modified",lastModified);streamFile(res,fileStats)}catch(error){res.writeStatus("500").end()}}}export function getFileStats(filePath){const stats=lstatSync(filePath,{throwIfNoEntry:false});if(!stats||stats.isDirectory()){return}const fileExtension=path.extname(filePath);const contentType=lookup(fileExtension)||"application/octet-stream";const{mtime,size}=stats;const lastModified=mtime.toUTCString();return{filePath,lastModified,size,contentType}}function toArrayBuffer(buffer){return buffer.buffer.slice(buffer.byteOffset,buffer.byteOffset+buffer.byteLength)}export function streamFile(res,fileStats){const filePath=fileStats?.filePath;const size=fileStats?.size;if(!filePath||!size){return res.writeStatus("404").end("File not found")}const readStream=createReadStream(filePath);function destroyReadStream(){!readStream.destroyed&&readStream.destroy()}function onError(error){destroyReadStream();throw error}function onDataChunk(chunk){const arrayBufferChunk=toArrayBuffer(chunk);res.cork(()=>{const lastOffset=res.getWriteOffset();const[ok,done]=res.tryEnd(arrayBufferChunk,size);if(!done&&!ok){readStream.pause();res.onWritable(offset=>{const[ok,done]=res.tryEnd(arrayBufferChunk.slice(offset-lastOffset),size);if(!done&&ok){readStream.resume()}return ok})}})}res.onAborted(destroyReadStream);readStream.on("data",onDataChunk).on("error",onError).on("end",destroyReadStream)}export function sendFile(req,res,filePath){const fileStats=getFileStats(filePath);if(!fileStats){return res.writeStatus("404").end("File not found")}const{contentType,lastModified}=fileStats;const ifModifiedSince=req.getHeader("if-modified-since");if(ifModifiedSince===lastModified){return res.writeStatus("304").end()}res.writeHeader("Content-Type",contentType);res.writeHeader("Last-Modified",lastModified);streamFile(res,fileStats)}
//# sourceMappingURL=file.js.map